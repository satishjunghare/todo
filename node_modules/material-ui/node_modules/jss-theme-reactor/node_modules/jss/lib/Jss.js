'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _StyleSheet = require('./StyleSheet');

var _StyleSheet2 = _interopRequireDefault(_StyleSheet);

var _PluginsRegistry = require('./PluginsRegistry');

var _PluginsRegistry2 = _interopRequireDefault(_PluginsRegistry);

var _plugins = require('./plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _sheets = require('./sheets');

var _sheets2 = _interopRequireDefault(_sheets);

var _generateClassName = require('./utils/generateClassName');

var _generateClassName2 = _interopRequireDefault(_generateClassName);

var _createRule2 = require('./utils/createRule');

var _createRule3 = _interopRequireDefault(_createRule2);

var _findRenderer = require('./utils/findRenderer');

var _findRenderer2 = _interopRequireDefault(_findRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Jss = function () {
  function Jss(options) {
    (0, _classCallCheck3['default'])(this, Jss);
    this.version = "6.2.0";
    this.plugins = new _PluginsRegistry2['default']();

    this.use.apply(this, _plugins2['default']); // eslint-disable-line prefer-spread
    this.setup(options);
  }

  (0, _createClass3['default'])(Jss, [{
    key: 'setup',
    value: function setup() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.options = (0, _extends3['default'])({}, options, {
        generateClassName: options.generateClassName || _generateClassName2['default']
      });
      var plugins = this.options.plugins;

      if (plugins) this.use.apply(this, plugins); // eslint-disable-line prefer-spread
      return this;
    }

    /**
     * Create a Style Sheet.
     */

  }, {
    key: 'createStyleSheet',
    value: function createStyleSheet(styles, options) {
      return new _StyleSheet2['default'](styles, (0, _extends3['default'])({
        jss: this,
        generateClassName: this.options.generateClassName
      }, options));
    }

    /**
     * Detach the Style Sheet and remove it from the registry.
     */

  }, {
    key: 'removeStyleSheet',
    value: function removeStyleSheet(sheet) {
      sheet.detach();
      _sheets2['default'].remove(sheet);
      return this;
    }

    /**
     * Create a rule without a Style Sheet.
     */

  }, {
    key: 'createRule',
    value: function createRule(name) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // Enable rule without name for inline styles.
      if ((typeof name === 'undefined' ? 'undefined' : (0, _typeof3['default'])(name)) === 'object') {
        options = style;
        style = name;
        name = undefined;
      }

      if (!options.classes) options.classes = {};
      if (!options.jss) options.jss = this;
      if (!options.Renderer) options.Renderer = (0, _findRenderer2['default'])(options);
      if (!options.generateClassName) {
        options.generateClassName = this.options.generateClassName || _generateClassName2['default'];
      }

      var rule = (0, _createRule3['default'])(name, style, options);
      this.plugins.onProcessRule(rule);

      return rule;
    }

    /**
     * Register plugin. Passed function will be invoked with a rule instance.
     */

  }, {
    key: 'use',
    value: function use() {
      var _this = this;

      for (var _len = arguments.length, plugins = Array(_len), _key = 0; _key < _len; _key++) {
        plugins[_key] = arguments[_key];
      }

      plugins.forEach(function (plugin) {
        return _this.plugins.use(plugin);
      });
      return this;
    }
  }]);
  return Jss;
}();

exports['default'] = Jss;