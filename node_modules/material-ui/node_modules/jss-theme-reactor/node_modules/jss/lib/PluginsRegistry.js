'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var PluginsRegistry = function () {
  function PluginsRegistry() {
    (0, _classCallCheck3['default'])(this, PluginsRegistry);
    this.creators = [];
    this.processors = [];
  }

  (0, _createClass3['default'])(PluginsRegistry, [{
    key: 'onCreateRule',


    /**
     * Call `onCreateRule` hooks and return an object if returned by a hook.
     */
    value: function onCreateRule(name, decl, options) {
      for (var i = 0; i < this.creators.length; i++) {
        var rule = this.creators[i](name, decl, options);
        if (rule) return rule;
      }
      return null;
    }

    /**
     * Call `onProcessRule` hooks.
     */

  }, {
    key: 'onProcessRule',
    value: function onProcessRule(rule) {
      if (rule.isProcessed) return;
      for (var i = 0; i < this.processors.length; i++) {
        this.processors[i](rule, rule.options.sheet);
      }
      rule.isProcessed = true;
    }

    /**
     * Register a plugin.
     * If function is passed, it is a shortcut for `{onProcessRule}`.
     */

  }, {
    key: 'use',
    value: function use(plugin) {
      if (typeof plugin === 'function') {
        this.processors.push(plugin);
        return;
      }

      if (plugin.onCreateRule) this.creators.push(plugin.onCreateRule);
      if (plugin.onProcessRule) this.processors.push(plugin.onProcessRule);
    }
  }]);
  return PluginsRegistry;
}();

exports['default'] = PluginsRegistry;